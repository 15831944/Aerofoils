/* Aerofoil
Aerofoil plotting and CNC cutter driver
Copyright(C) 1995-2019 R Bruce Porteous

This program is free software : you can redistribute it and / or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once
#include <string>
#include <utility>
#include <vector>
#include <istream>
#include <fstream>

class CutStructure;
class COutputDevice;

struct Coordinates {
	double x;
	double y;
	Coordinates() : x(0), y(0) {}
};

// Items generated by the parser.
class DXFItem 
{
	std::string layer;
protected:
	const double pi = 3.14159265358979323846;
public:
	virtual ~DXFItem() {}
	virtual void add(int code, const std::string& value);
	virtual DXFItem* clone() = 0;
	virtual void cut(CutStructure * pCut, COutputDevice * pdev) = 0;

};

// Abstract class to be implemented by anything that uses the parser to 
// receive DXFItems.
class DXFItemReceiver {
public:
	virtual void add(DXFItem* item) = 0;
};

// Basic DFX parser that will read
// ARC,
// CIRCLE,
// ELLIPSE,
// LINE,
// LWPOLYLINE
// POINT.
// Note that it ignores headers and blocks and assumes mm.
class DXFParser
{
	std::ofstream* ofs;

public:
	DXFParser();
	~DXFParser();

	typedef std::pair<std::string, std::string> CodeT;
	void readDxf(std::istream& is, DXFItemReceiver* pReceiver);
};
